To solve the rotated array problem, the simplest solution to it go through all the list and search of the number linearly.  Whereas, there are better methods to solve this problem. From the problem statement we know that the list is half sorted into two parts. We can perform a binary search on the list find the number in log(n).

Time complexity: O(log(n)) because we divide the list in half on every time in worst case.
Space complexity: O(1) because it doesn't use any other collections to store temporary data except some variables.